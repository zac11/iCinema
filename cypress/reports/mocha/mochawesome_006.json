{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2020-04-21T16:04:10.364Z",
    "end": "2020-04-21T16:04:15.499Z",
    "duration": 5135,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9bd48b6b-9340-4e49-8965-cef3cdc764dc",
      "title": "",
      "fullFile": "cypress/integration/examples/files.spec.js",
      "file": "cypress/integration/examples/files.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3c1d1024-5316-436f-8e6b-c53b5d7b1cf7",
          "title": "Files",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.fixture() - load a fixture",
              "fullTitle": "Files cy.fixture() - load a fixture",
              "timedOut": null,
              "duration": 1531,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/fixture\n// Instead of writing a response inline you can\n// use a fixture file's content.\ncy.server();\ncy.fixture('example.json').as('comment');\n// when application makes an Ajax request matching \"GET comments/*\"\n// Cypress will intercept it and reply with object\n// from the \"comment\" alias\ncy.route('GET', 'comments/*', '@comment').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.fixture-btn').click();\ncy.wait('@getComment').its('responseBody')\n    .should('have.property', 'name')\n    .and('include', 'Using fixtures to represent data');\n// you can also just write the fixture in the route\ncy.route('GET', 'comments/*', 'fixture:example.json').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.fixture-btn').click();\ncy.wait('@getComment').its('responseBody')\n    .should('have.property', 'name')\n    .and('include', 'Using fixtures to represent data');\n// or write fx to represent fixture\n// by default it assumes it's .json\ncy.route('GET', 'comments/*', 'fx:example').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.fixture-btn').click();\ncy.wait('@getComment').its('responseBody')\n    .should('have.property', 'name')\n    .and('include', 'Using fixtures to represent data');",
              "err": {},
              "uuid": "b384a87f-2eab-47bf-8e8c-f86831264122",
              "parentUUID": "3c1d1024-5316-436f-8e6b-c53b5d7b1cf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.fixture() or require - load a fixture",
              "fullTitle": "Files cy.fixture() or require - load a fixture",
              "timedOut": null,
              "duration": 366,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// we are inside the \"function () { ... }\"\n// callback and can use test context object \"this\"\n// \"this.example\" was loaded in \"beforeEach\" function callback\nexpect(this.example, 'fixture in the test context')\n    .to.deep.equal(requiredExample);\n// or use \"cy.wrap\" and \"should('deep.equal', ...)\" assertion\n// @ts-ignore\ncy.wrap(this.example, 'fixture vs require')\n    .should('deep.equal', requiredExample);",
              "err": {},
              "uuid": "ea637623-339a-4262-93a6-5fc39ff7c542",
              "parentUUID": "3c1d1024-5316-436f-8e6b-c53b5d7b1cf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.readFile() - read file contents",
              "fullTitle": "Files cy.readFile() - read file contents",
              "timedOut": null,
              "duration": 368,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/readfile\n// You can read a file and yield its contents\n// The filePath is relative to your project's root.\ncy.readFile('cypress.json').then(function (json) {\n    expect(json).to.be.an('object');\n});",
              "err": {},
              "uuid": "567ae0b0-8e21-444c-bde1-32f4ed67d61d",
              "parentUUID": "3c1d1024-5316-436f-8e6b-c53b5d7b1cf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.writeFile() - write to a file",
              "fullTitle": "Files cy.writeFile() - write to a file",
              "timedOut": null,
              "duration": 1321,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/writefile\n// You can write to a file\n// Use a response from a request to automatically\n// generate a fixture file for use later\ncy.request('https://jsonplaceholder.cypress.io/users')\n    .then(function (response) {\n    cy.writeFile('cypress/fixtures/users.json', response.body);\n});\ncy.fixture('users').should(function (users) {\n    expect(users[0].name).to.exist;\n});\n// JavaScript arrays and objects are stringified\n// and formatted into text.\ncy.writeFile('cypress/fixtures/profile.json', {\n    id: 8739,\n    name: 'Jane',\n    email: 'jane@example.com',\n});\ncy.fixture('profile').should(function (profile) {\n    expect(profile.name).to.eq('Jane');\n});",
              "err": {},
              "uuid": "c837204d-17cf-4299-8eb8-0fd8736550c2",
              "parentUUID": "3c1d1024-5316-436f-8e6b-c53b5d7b1cf7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b384a87f-2eab-47bf-8e8c-f86831264122",
            "ea637623-339a-4262-93a6-5fc39ff7c542",
            "567ae0b0-8e21-444c-bde1-32f4ed67d61d",
            "c837204d-17cf-4299-8eb8-0fd8736550c2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3586,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.0"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "5.1.0"
    }
  }
}